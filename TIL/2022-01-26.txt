<투두리스트 다시 복습>
--만드는 과정

1.  html에 todo입력 받을 form 입력
2.  입력받은 todo를 나타낼 ul입력
    js에서 li를 생성한 후 추가할거라 더이상의 추가 입력 x

3.    
    1) js에서 사용할 것들 html에서 grab하기
const toDoForm = document.getElementById("todo-form");
const toDoInput = toDoForm.querySelector("input");
const toDoList = document.getElementById("todo-list");

    2) 입력받고 submit을 하면 handleToDoSubmit함수 실행
toDoForm.addEventListener("submit", handleToDoSubmit); 
    
    3) - event.preventDefault()로 submit을 해도 화면 
         넘어가지 않게 설정
       - 새로운 변수 newToDo에 입력받은 값 저장.
       - 입력받은 값을 ""로 저장해 submit후 입력받는 칸이
       비어있게 설정
       - 콘솔로그로 비포/애프터 확인 
function handleToDoSubmit(event){
    event.preventDefault();
    const newToDo = toDoInput.value;
    console.log(toDoInput.value);
    toDoInput.value = "";
    console.log(newToDo, toDoInput.value);
}

4.
    1) submit하고 paintToDo함수 실행
function handleToDoSubmit(event){
    event.preventDefault();
    const newToDo = toDoInput.value;
    toDoInput.value = "";
    paintToDo(newToDo);
}
    2) message = paintToDo괄호 안에 있는 newToDo
        toDoList안에 넣을 수 있는 li와 span생성후 
        li안에 span을 넣음
         --><span><li></li></span>
function paintToDo(message){
    const li = document.createElement("li");
    const span = document.createElement("span");
    li.appendChild(span);
    span.innerText = message;
    toDoList.appendChild(li);
}

5.
    1) btn도 생성 후 li에 포함시키고 btn을 클릭하면 
        deleteToDo함수 실행시키기
function paintToDo(message){
    const li = document.createElement("li");
    const span = document.createElement("span");
    const btn = document.createElement("button");
    btn.innerText = "x";
    li.appendChild(span);
    li.appendChild(btn);
    span.innerText = message;
    toDoList.appendChild(li);
    btn.addEventListener("click", deleteToDo);
}

    2)클릭되었을 때의 target = btn이고 btn의 부모는 li이다
        이 클릭된li를 del이라고 변수 설정하고 btn의 x를 
        누르면 del을 삭제 시켜주고 인터페이스의 투두리스트 
        하나가 삭제된다.
function deleteToDo(event){
    const del = (event.target.parentElement);
    del.remove();
}

6. localStorage에는 array를 저장할 수 없기때문에 텍스트로 바꿔야함
[]가 포함된 배열로 저장하기 위해서는 JSON.stringify를 사용해서
"["a","b","c"]"형태로 바꾸고 후에 JSON.parse를 통해서
["a","b","c"]로 전환하면 된다.

    1)"todos"를 텍스트형식으로 바꾸기(JSON.stringify())
function saveToDos(){
    localStorage.setItem("todos", JSON.stringify(toDos));
}

    2)저장되어있는 "todos"를 불러와서 savedToDos에 저장
    새로고침시 나오는 화면에 적용하려고
const savedToDos = localStorage.getItem("todos");


    3)
if(savedToDos !== null){  --->저장되어 있더라면
    const parsedToDos = JSON.parse(savedToDos);  -->JSON.parse를 통해서 array형태로 변환
    toDos=parsedToDos;  ---->새로고침하면 toDos=[]이기 때문에 toDos를 let으로 설정하고 parsedToDos를 대입
    parsedToDos.forEach(paintToDo);  parsedToDos의 각각의 item마다 paintToDo 함수를 진행
}

7. 배열에서 내가 원하는 것만 빼고 삭제할때는 없애는 것이 아니라 내가 
선택한 것들을 뺀 배열을 새로 만드는 것이다

function sextfilter(item){
     return item!=3
}
--->참이면 그대로 나오고 거짓이면 안나옴 (필터됨 걸러짐)
[1,2,3,4].filter(sexyfilter);     or arr.filter(item =>item>2)


function handleToDoSubmit(event){
    event.preventDefault();
    const newToDo = toDoInput.value;
    toDoInput.value = "";
    const newToDoObj = {  -------->text와 id가 담긴 배열을 생성하고 이 배열을 밑의 두 함수에 대입한다.
        text : newToDo,
        id :Date.now(),   --->date.now()로 id를 얻음.
    }
    toDos.push(newToDoObj);
    paintToDo(newToDoObj);
    saveToDos();
}

function paintToDo(message){-->message는 newToDoobj ==>text,id,가 모두 담겨있음
    const li = document.createElement("li");  -->새로 생성한 li
    li.id = message.id;  	                    --->그 li의 id = message의 id 
    const span = document.createElement("span");
    const btn = document.createElement("button");
    btn.innerText = "x";
    li.appendChild(span);
    li.appendChild(btn);
    span.innerText = message.text;
    toDoList.appendChild(li);
    btn.addEventListener("click", deleteToDo);
}

function deleteToDo(event){ -->클릭시 실행되는 함수
    const del = (event.target.parentElement);   -->del설정
    del.remove();   			          -->del삭제(화면에서)
    toDos = toDos.filter(toDo => toDo.id !==parseInt(del.id)); -->storage에서 지우기 filter사용
    saveToDos();   새로 필터링된 toDos를 다시 string으로 바꾸기 위해 savedToDos함수 실행
}

